-- Initial sneakyterm.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                sneakyterm
version:             0.1
synopsis:            Tiny, declarative wrapper around ncurses
description:
  `SneakyTerm` gives you 'MonadTerminal' which gives you two operations, 'tmRender' to render a list of tiles, and 'tmCharEvent' to wait for character input. A simple example:
  .
  > main = do
  >   let viewport = rectFromOriginAndDim (V2 0 0) (V2 80 25)
  >   runTerminal viewport $ do
  >     tmRender [Tile (V2 10 10) '@' (ColorPair Red Blue)]
  >     _ <- tmCharEvent
  >     return ()
  .
  This will render a red `@` at column 11, line 11, with blue background.

homepage:            https://github.com/pmiddend/sneakyterm
bug-reports:         https://github.com/pmiddend/sneakyterm/issues
license:             GPL-3
license-file:        LICENSE
author:              Philipp Middendorf
maintainer:          pmidden@secure.mailbox.org
-- copyright:           
category:            User Interfaces
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10
copyright:           Copyright (C) 2014-2015 Philipp Middendorf
tested-with:         GHC == 7.8.3, GHC == 7.10.2

source-repository head
  type: git
  location: git://github.com/pmiddend/sneakyterm.git

library
  exposed-modules:     System.Console.SneakyTerm.MonadTerminal
                     , System.Console.SneakyTerm.Rect
                     , System.Console.SneakyTerm.ColorPair
                     , System.Console.SneakyTerm.PointInt
                     , System.Console.SneakyTerm.Tile
                     , System.Console.SneakyTerm.Color
  -- other-modules:       
  -- other-extensions:    
  build-depends:       base >=4.7 && <4.8
                     , linear
                     , lens
                     , mtl
                     , transformers
                     , ncurses
                     , containers
                     , classy-prelude
  hs-source-dirs:      src
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

--executable example_main
--  main-is:             Main.hs
--  hs-source-dirs:      examples
--  -- other-extensions:
--  build-depends:       base >=4.7 && <4.9
--                     , sneakyterm
--                     , linear
--                     , classy-prelude
--  default-language:    Haskell2010
--  default-extensions: NoImplicitPrelude
--                    , OverloadedStrings
--  ghc-options: -Wall
